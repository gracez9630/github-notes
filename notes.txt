HTML Element:
Most HTML elements have an opening and closing tab
All HTML tags are written in lowercase
lorem ipsum text are used as placeholder text
HTML has a special element for creating unordered lists, or bullet point style lists.
HTML has another special element for creating ordered lists, or numbered lists.
HTML stands for Hyper Text Markup Language
You can add another level of organization in your HTML document within the html tags with the head and body elements.
Every HTML page has a body element.
In addition to classes, each HTML element can also have an id attribute.
<h1>Hello</h1>
h1 is the main heading, with h2 a subheading, and h3, h4, h5, h6 as to indicate different levels of subheadings.
h2 would be below h1, wit h3 behind h2 and continue
h6 is the smallest heading to make
<p>I’m a p tag!</p>
p stands for a paragraph
p would be under the headings
<!-- ends with -->
Known as commenting
A way to leave comments for other developers within your code while unaffecting the result output
Way to make code inactive without having to delete it


Unordered list starts with an opening <ul> element, followed by <li> elements
<ul>
  <li>...</li>
</ul>
Orders list starts with an opening <ol> element, followed by any number of <li> elements
<ol>
  <li>Garfield</li>
</ol>
By adding ul or ol element inside another ul or ol, makes a second type of it
<ul>
<li> … </li>
<ul>
	<li> … </li>
</ul>
</ul>
< ... > 
Known as angle brackets
Input elements are a way to get input from your user
Input elements are self closing
<input type="text">
To hide the text, use:
<input type=”password”>
Placeholder text is what is displayed on your input element before your user has inputted anything
<input type="text" placeholder="this is placeholder text">
By specifying an action attribute on your form element, you can build web forms that actually submit data to a server using nothing more than pure HTML
The input element would be inside a form element
<form action="/url-where-you-want-to-submit-form-data">
  <input>
</form>
Submit button would send the data from your form to the URL you specified with your form’s action attribute
Should be inside the form element
<button type="submit">this button submits the form</button>
The attribute require that is within the input element makes user not be able to submit your form until they have filled them out
<input type="text" required>
Radio buttons are a type of input
Can be used for questions where you want the user to give you one answer out of the multiple options.
Can be nested within its own label element
By wrapping a input element inside a label element, it would automatically associate the radio button input with the label element surrounding it
All related radio buttons should have the same name attribute to create a radio button group
By creating a radio group, selecting another radio button would automatically deselect the other button in the same group ensuring only one answer is provided.
<label> 
  <input type="radio" name="indoor-outdoor">Indoor 
</label>
It is considered best practice to set a for attribute on the label element, with a value that matches the value of the id attribute of the input element. This allows assistive technologies to create a linked relationship between the label and the related input element.
<input id="indoor" type="radio" name="indoor-outdoor">
<label for="indoor">Indoor</label>
We can also nest the input element within the label tags:
<label for="indoor"> 
  <input id="indoor" type="radio" name="indoor-outdoor">Indoor 
</label>
Should be inside the form element
Checkboxes are a type of input
Can be nested in their own label element
Wrapping it around the label element automatically associates the checkbox input with the label element surrounding it.
All related checkboxes should have the same name attribute.
It is considered best practice to explicitly define the relationship between a checkbox input and its corresponding label by setting the for attribute on the label element to match the id attribute of the associated input element.
<label for="loving"><input id="loving" type="checkbox" name="personality"> Loving</label>
Inputs of type radio and checkbox report their values from the value attribute.
<label for="indoor">
  <input id="indoor" value="indoor" type="radio" name="indoor-outdoor">Indoor
</label>
<label for="outdoor">
  <input id="outdoor" value="outdoor" type="radio" name="indoor-outdoor">Outdoor
</label>
If you omit the value attribute, the submitted form data uses the default value
the value attribute needs to be set to something to identify the option.
You can set a checkbox or radio button to be checked by default using the checked attribute.
add the word checked to the inside of an input element
<input type="radio" name="test-name" checked>
The div element, also known as a division element, is a general purpose container for other elements.
It’s the most commonly used HTML of all
open a div element with <div> and close it on another line with </div>
Used to group elements
The span element is inline
<p> .... <span> .... </span> ... </p>
<!DOCTYPE ...> tag on the first line, where the ... part is the version of HTML. For HTML5, you use <!DOCTYPE html>
The ! and uppercase DOCTYPE is important, especially for older browsers. The html is not case sensitive
<html> goes directly below the <!DOCTYPE html> line, and the closing </html> goes at the end of the page.
the rest of your HTML code needs to be wrapped in html tags
<!DOCTYPE html>
<html>

</html>
The head tag would have any markup with information about your page 
The head is responsible for things of everything else like CSS and title
Doesn’t show in page
The body tag would have any markup with the content of the page (what displays for a user)
The body is responsible for showing up on the page
The body element just like any other HTML element, and all your other elements will inherit your body element's styles.
classes will override the body element's CSS
Metadata elements, such as link, meta, title, and style, typically go inside the head element.
<!DOCTYPE html>
<html>
  <head>
    <meta />
  </head>
  <body>
    <div>
    </div>
  </body>
</html>
Command [ or ] would indent the code from left or right.
<br> to bring a option down
You can add emojis by using this website
<meta charset=“UTF-8”> to get the emoji
Add &#x instead of U+ and then the number to add into any heading or paragraph
<p> This is a emoji → &#x1F60a</p>
To show code snippets use:
< = &lt;
> = &gt;
Surround the code snippets with <code> </code>

HTML5 Element:
HTML5 introduces more descriptive HTML tags. These include main, header, footer, nav, video, article, section and others.
<main> ends with </main>
Helps search engines and other developers find the main content of your page
<img src=”.....”>
Can add images
img element are self-closing
All img elements must have an alt attribute.
<img src=”...” alt=”...”>
Used for screen readers to improve accessibility and is displayed if the image fails to load.
It’s ideal for alt attribute to not contain special characters unless needed
Replit.com: to root out image in folder, add:
src=”(name of folder)/(file name)”
<a href=”...”>this link to …</a>
a (anchor) elements are used to link content outside of your web page
a elements needs a destination web address called an href attribute
<a href=”...”>this link to …</a>
Can be used to create internal links to jump to different sections within a web page
Assign a link’s href attribute to a hash symbol # plus the value of the id attribute for the element you want to internally link. Add the same id attribute to the element you are linking to create an internal link.
<a href="#contacts-header">Contacts</a>
...
<h2 id="contacts-header">Contacts</h2>
You can nest links within other elements
The text, link to …, within the a element is called anchor text, and will display the link to click
<a href=" ... " target="...">link to freecodecamp.org</a>
You can add a element to your website before you know where they will link. Can be handy when changing the behavior of a link using JavaScript
<a href="#" target="_blank">
You can make elements into links by nesting them within an a element
<a href="#"><img src="..." alt="..."></a>


The href in an anchor tag attribute that contains the URL address of the link
id is an attribute that uniquely describes an element
Using id attribute to style a single element and can be used to select and modify specific elements with JavaScript
Should be unique
<h2 id="cat-photo-app">
Can be used to style be using CSS
Not reusable and should be be applied to only one element
Has a higher importance than a class so if both are applied in the same element and have conflicting style, the id will be applied
#cat-photo-element {
  background-color: green;
}
When the user clicks on the contacts link, it will bring them to the section of the web page with the contacts header element
target is an anchor tag attribute that specifies where to open the link
_blank specifies to open the link in a new tab.
<a href="https://www.freecodecamp.org" target="_blank"> ... </a>

Basic CSS
CSS stands for Cascading Style Sheets
By using style, you can change the color of text
The color style is responsible for the color of an element’s text
<h2 style="color: blue;">CatPhotoApp</h2>
Use to style individual elements with inline CSS
<style>
  h2 {
    color: red;
  }
</style>
Used to create a CSS selector for all a specific element
The use of { and } are for opening and closing around each element’s style rule
Element’s style need to be between the { and }
Add ; to the end of each element’s style rule
Class are reusable style that can be added in HTML elements
Can be used in the same CSS style on multiple HTML elements
The order of the class declarations in the <style> section is what is important as the second declaration will always take precedence over the first
<h2 class="blue-text">CatPhotoApp</h2>
Use to connect the class with style
Class elements inside HTML elements do not contain a .
<style>
  .blue-text {
    color: blue;
  }
</style>
Can have multiple class in one element by separating it with a space
<img class="class1 class2">
To do font size, the font-size CSS property
Inside style
h1 {
  font-size: 30px;
}
By using the font-family property, you can set an element on which font you want to use
h2 {
  font-family: sans-serif;
}
You can also use custom web fonts for your website
Google Fonts is a free library of web fonts that you can use in your CSS by referencing the font's URL.
To import google font, copy the font’s URL from google fonts library and paste it in your HTML
<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">
font-family: FAMILY_NAME, GENERIC_NAME;
GENERIC_NAME is optional, used as a fallback font in case the other specified font is not available
Family names are case-sensitive and need to be wrapped in “ quotes ” if there is a space in the name.
If one of the font is unavailable, can be used to degrade to another font
p {
  font-family: Helvetica, sans-serif;
}
Using the width property, it controls an element's width
Use px (pixel) to specify the image’s width
Use the CSS class larger-image or smaller-image then give a specific width
<style>
  .larger-image {
    width: 500px;
  }
</style>
Put img with class to work
CSS borders have properties like style, color and width.
Specific elements can have multiple properties inside
<style>
  .thin-red-border {
    border-color: red;
    border-width: 5px;
    border-style: solid;
  }
</style>
Using the CSS property border-radius can help round corners
border-radius: 10px;
Can also be specified by percentage
border-radius: 50%;
Using background-color can set element’s background color
.green-background {
  background-color: green;
}
Universal: * { }
Selects everything
Element: h1 { }
Only selecting everything for one variable
Class: .classname { }
Selects all elements that has the same tag class name
Id: #idname { }
Selects all elements that has the same id name
Has to be unique
Inline: (rare)
<tag style=”property:value;”>

Descendant Selector
Selects all B inside of A
Plate apple
Combine the Descendant & ID Selectors
Selects all B inside of A but with Id
Combine the Class Selector
can combine the class selector with other selectors, like the type selector.
 A.classname
Comma Combinator
can combine any selectors this way, and can specify more than two.
 A , B
The Universal Selector
Can select everything
*
Combine the Universal Selector
Selects all element inside of A
 A *
Adjacent Sibling Selector
selects all B elements that directly follow A. Elements that follow one another are called siblings. They're on the same level, or depth.
 A + B
Padding, border, and margin are important properties control the space that surrounds each HTML element
padding controls the amount of space between the element's content and its border
used to generate space around an element's content, inside of any defined borders.
CSS allows you to control the padding of all four individual sides of an element with the padding-top, padding-right, padding-bottom, and padding-left properties
you can specify them all in one line, going from top, right, bottom, left
 padding: 20px;
 padding-top: 40px;
padding: 10px 20px 10px 20px;
margin controls the amount of space between an element's border and surrounding elements
By setting margin to a negative value, the element will grow larger.
CSS allows you to control the margin of all four individual sides of an element with the margin-top, margin-right, margin-bottom, and margin-left properties
You can specify them all in one line, going from top, right, bottom, left
 margin: 20px;
 margin-top: 40px;
margin: 10px 20px 10px 20px;
[attr=value] matches and styles elements with a specific attribute value
[type='radio'] {
  margin: 20px 0px 20px 0px;
}
Pixels (px) are a type of length unit, which is what tells the browser how to size or space an item
two main types of length units are absolute and relative
Absolute unit tie to physical units of length: in (inches) and mm (millimeters)
Relative unit are relative to another length value: em and rem
There are several relative unit options that are tied to the size of the viewport.
Text-align: center;
Centers basically everything
The most powerful way to overwrite an element is using !important
color: red !important;
Another way to represent colors is using the hexadecimal code (hex code)
Usually uses decimals
0-9 represents the values zero to nine
A,B,C,D,E,F represents the values 10-15
hex codes use 6 hexadecimal digits to represent colors, two each for red (R), green (G), and blue (B) components
Hex codes can be shorten, for example: red's hex code #FF0000 can be shortened to #F00
body {
  color: #000000;
}
Another way you can represent colors in CSS is by using RGB values.
Lowest is 0, highest is 255
body {
  background-color: rgb(255, 165, 0);
}
You can make a gradient by using:
body  {
 background-image: linear-gradient(saddlebrown, wheat);
}

Applied Visual Design
Basics:
Text align specifies the horizontal alignment of text in an element
Text-align: center;
Height property  changes the height
Height: 40px;
Width property changes the width
Width: 40px;
To make elements bold use <strong>
There can also be a css in making a element bold
p {
Font-weight: bold;
}
To make elements underlined use <u>
Can also be used in css
p{
 text-decorations: underline;
}
To italicize text use <em>
Can also be used in css
p{
  font-style:italics;
 }
To strikethrough elements use <s>
Can also be used in css
text-decoration:line-through;
To separate heading and paragraph 
Use font-size to adjust sizes of an element using border
border:3px solid yellow;
Using rgba to adjust colors
rgba(153, 153, 255, 0.6)
Box shadow adds a box shadow to a element
Opacity changes the transparent of an element
Colors:
Complementary colors complement each other
Tertiary colors are made by mixing primary and secondary together
Hsl helps adjust the tone of color by combining the hue, saturation and lightness
hsl(180, 100%, 50%)
Lightness is the amount of white or black in a color
Linear gradients lets color transition to select elements
Can also repeat
Background: linear-gradient(gradient_direction, color 1, color 2, color 3 ... )
background: repeating-linear-gradient(65deg, #F3ED6B 0px, #7BE6CF 40px, #BD6BE1 90px).
Texture background adds a certain texture to the background
body{background: url('some url of choice')}⁡
Positioning:
Where you want your elements to go
Relative specifies how a css should move
position: relative;
Css offset can change how offset a relative item is in the normal flow of a page
     top: 10px;
      right: 10px;
Absolute positioning locks element in place
position: absolute;
Fixed positioning locks element in place when when being scrolled down
position: fixed;
Z-index is used to overlap elements
z-index: 1;
Float remove elements from the flow of the code so that the element can be pushed left or right
         float: right; 
          width: 200px;
Geometry:
Box shadow stes a shadow on an element selected
box-shadow: 5px 10px 10px 20px #43AA8B;
::before and ::after are pseudo elements that makes things pop up before or after on a selected element
h3::before { content:"cool &"; color: cyan; }
Transform is one of the main property used with geometry
Rotate and change what a shape looks like
uses scale(), skewX(), skewY() and rotate
Transform: scale (...)
The animation properties control how the animation should behave and the @keyframes rule controls what happens during that animation.
You can change the @keyframes rule for one of the elements by changing one of the element’s percentage
There are 8 animation properties
animation-name sets the name of the animation, which is later used by @keyframes to tell CSS which rules go with which animations.
animation-duration sets the length of time for the animation.
can change the animation of a element timing differently
#anim {
  animation-name: colorful;
  animation-duration: 3s;
}
@keyframes is how to specify exactly what happens within the animation over the duration.
CSS properties for 0% is how the element displays in the opening scene
CSS properties for 100% is how the element appears at the end, right before the credits roll
@keyframes colorful {
  0% {
    background-color: blue;
  }
  100% {
    background-color: yellow;
  }
}
You can use CSS @keyframes to change the color of a button in its hover state.
img {
    width: 30px;
  }
  img:hover {
    animation-name: width;
    animation-duration: 500ms;
  }
 
  @keyframes width {
    100% {
      width: 40px;
    }
  }
The animation-fill-mode specifies the style applied to an element when the animation has finished
animation-fill-mode: forwards;
Another animation property is the animation-iteration-count, which allows you to control how many times you would like to loop through the animation
animation-iteration-count: 3;
In CSS animations, the animation-timing-function property controls how quickly an animated element changes over the duration of the animation.
The animation-timing-function says how the car accelerates and decelerates over the course of the drive.
In CSS animations, Bezier curves are used with the cubic-bezier function
The animation-timing-function automatically loops at every keyframe when the animation-iteration-count is set to infinite
cubic-bezier(0.3, 0.4, 0.5, 1.6);
Makes the motion seem more natural
The cubic-bezier function consists of four main points that sit on this 1 by 1 grid: p0, p1, p2, and p3
This is done in CSS by declaring the x and y values of the p1 and p2 "anchor" points in the form: (x1, y1, x2, y2)
p0 and p3 are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1)
animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);
by changing the p1 and p2 anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time
animation-timing-function: cubic-bezier(0, 0, 0.58, 1);
animation-timing-function: linear;
animation-timing-function: ease-out;
When elements have a specified position, such as fixed or relative, the CSS offset properties right, left, top, and bottom can be used in animation rules to create movement.
you can push the item downwards then upwards by setting the top property of the 50% keyframe to 50px, but having it set to 0px for the first (0%) and the last (100%) keyframe.
Can move to other sides by typing:
left: 25px;
@keyframes rainbow {
  0% {
    background-color: blue;
    top: 0px;
  }
  50% {
    background-color: green;
    top: 50px;
  }
  100% {
    background-color: yellow;
    top: 0px;
  }
}
By changing the opacity of an animated element, it gradually fades
opacity: 0.1;
